---
- name: Developer Environment Setup - GitHub Repository + Development Tools (macOS Apple Silicon)
  hosts: localhost
  connection: local
  gather_facts: false
  become: no  # Default to no privilege escalation
  vars:
    repo_url: "https://github.com/DreezeInc/dreeze-git-0.git"
    dest_path: "~/code/dreeze"
    repo_version: "main"  # Use master for octocat repository, or specify branch/tag/commit hash
    ansible_become_method: sudo
    ansible_become_user: root
  
  tasks:
    - name: Check if Xcode Command Line Tools are installed
      shell: xcode-select -p
      register: xcode_check
      failed_when: false
      changed_when: false
    
    - name: Install Xcode Command Line Tools if not present
      shell: xcode-select --install
      when: xcode_check.rc != 0
      register: xcode_install
    
    - name: Wait for Xcode Command Line Tools installation (if triggered)
      pause:
        prompt: "Please complete the Xcode Command Line Tools installation in the popup dialog, then press Enter to continue"
      when: xcode_check.rc != 0 and xcode_install.rc == 0
    
    - name: Verify git is available
      shell: which git
      register: git_check
      failed_when: git_check.rc != 0
      changed_when: false
    
    - name: Check if GitHub CLI (gh) is installed
      shell: which gh
      register: gh_check_early
      failed_when: false
      changed_when: false
    
    - name: Install GitHub CLI (gh) via Homebrew (for git authentication)
      homebrew:
        name: gh
        state: present
      when: gh_check_early.rc != 0
      register: gh_install_early
    
    - name: Check GitHub authentication status
      shell: gh auth status
      register: gh_auth_status
      failed_when: false
      changed_when: false
    
    - name: Run GitHub authentication script
      shell: bash ./github_auth.sh
      when: gh_auth_status.rc != 0
      register: gh_auth_result
    
    - name: Verify GitHub authentication after login
      shell: gh auth status
      register: gh_auth_verify
      when: gh_auth_result is defined and gh_auth_result.changed
      failed_when: false
    
    - name: Display authentication result
      debug:
        msg: |
          {% if gh_auth_verify is defined and gh_auth_verify.rc is defined and gh_auth_verify.rc == 0 %}
          ✅ GitHub authentication successful! You can now access private repositories.
          {% elif gh_auth_verify is defined and gh_auth_verify.rc is defined and gh_auth_verify.rc != 0 %}
          ⚠️  GitHub authentication not completed. Public repositories will still work.
          💡 You can authenticate later by running: ./github_auth.sh
          {% elif gh_auth_result is defined %}
          ✅ GitHub authentication process completed.
          {% else %}
          ✅ GitHub authentication was already configured.
          {% endif %}
      when: gh_auth_result is defined or gh_auth_verify is defined or gh_auth_status.rc != 0
    
    - name: Setup git to use GitHub CLI credentials
      shell: gh auth setup-git
      register: git_setup_result
      when: >
        (gh_auth_status.rc == 0) or 
        (gh_auth_verify is defined and gh_auth_verify.rc == 0)
      failed_when: false
      changed_when: git_setup_result.rc is defined and git_setup_result.rc == 0
    
    - name: Display git credential setup result
      debug:
        msg: "✅ Git configured to use GitHub CLI credentials"
      when: git_setup_result is defined and git_setup_result.rc is defined and git_setup_result.rc == 0
    
    - name: Check if Homebrew is installed
      shell: which brew
      register: brew_check
      failed_when: false
      changed_when: false
    
    - name: Install Homebrew if not present
      shell: NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: brew_check.rc != 0
      register: homebrew_install
      # become: yes  # Homebrew should NOT be installed with sudo
    
    - name: Add Homebrew to PATH for Apple Silicon
      shell: eval "$(/opt/homebrew/bin/brew shellenv)"
      when: brew_check.rc != 0 and homebrew_install is defined
      changed_when: false
    
    - name: Update Homebrew (idempotent)
      homebrew:
        update_homebrew: yes
      when: brew_check.rc == 0 or homebrew_install is defined
    
    - name: Check if Slack is installed
      shell: ls /Applications/Slack.app
      register: slack_check
      failed_when: false
      changed_when: false

    - name: Check if Google Chrome is installed
      shell: ls /Applications/Google\ Chrome.app
      register: chrome_check
      failed_when: false
      changed_when: false
    
    - name: Install Slack via Homebrew Cask
      homebrew_cask:
        name: slack
        state: present
      when: slack_check.rc != 0
      register: slack_install
      # become: yes  # Not required for Homebrew Cask on modern macOS

    - name: Install Google Chrome via Homebrew Cask
      homebrew_cask:
        name: google-chrome
        state: present
      when: chrome_check.rc != 0
      register: chrome_install
      # become: yes  # Not required for Homebrew Cask on modern macOS
    
    - name: Check if Cursor is installed
      shell: ls /Applications/Cursor.app
      register: cursor_check
      failed_when: false
      changed_when: false
    
    - name: Install Cursor via Homebrew Cask
      homebrew_cask:
        name: cursor
        state: present
      when: cursor_check.rc != 0
      register: cursor_install
      # become: yes  # Not required for Homebrew Cask on modern macOS

    - name: Launch Cursor once to set up CLI
      shell: open -a Cursor
      when: cursor_install is defined and cursor_install.changed
      async: 0
      poll: 0

    - name: Wait for Cursor initialization
      pause:
        seconds: 10
      when: cursor_install is defined and cursor_install.changed

    - name: Quit Cursor after initialization
      shell: osascript -e 'quit app "Cursor"'
      when: cursor_install is defined and cursor_install.changed
      ignore_errors: true

    - name: Check if cursor CLI is available
      shell: which cursor
      register: cursor_cli_check
      failed_when: false
      changed_when: false

    - name: Symlink Cursor CLI if missing
      shell: |
        CURSOR_APP="/Applications/Cursor.app"
        for p in "$CURSOR_APP/Contents/Resources/app/bin/cursor" \
                 "$CURSOR_APP/Contents/MacOS/cursor"; do
          if [ -x "$p" ]; then
            TARGET="$p"
            break
          fi
        done
        if [ -n "$TARGET" ]; then
          if [ -d /opt/homebrew/bin ]; then
            ln -sf "$TARGET" /opt/homebrew/bin/cursor
          else
            ln -sf "$TARGET" /usr/local/bin/cursor
          fi
        fi
      when: cursor_cli_check.rc != 0
      become: yes

    - name: Re-check cursor CLI availability
      shell: which cursor
      register: cursor_cli_final
      failed_when: false
      changed_when: false
    
    - name: Check if GitLens extension is installed in Cursor
      shell: cursor --list-extensions 2>/dev/null | grep -i "eamodio.gitlens"
      register: gitlens_check
      failed_when: false
      changed_when: false
      when: cursor_cli_final.rc == 0
    
    - name: Install GitLens extension in Cursor
      shell: cursor --install-extension eamodio.gitlens --force
      when: gitlens_check.rc != 0 and cursor_cli_final.rc == 0
      register: gitlens_install
      ignore_errors: yes
    
    - name: Check if Python extension is installed in Cursor
      shell: cursor --list-extensions 2>/dev/null | grep -i "ms-python.python"
      register: python_ext_check
      failed_when: false
      changed_when: false
      when: cursor_cli_final.rc == 0
    
    - name: Install Python extension in Cursor
      shell: cursor --install-extension ms-python.python --force
      when: python_ext_check.rc != 0 and cursor_cli_final.rc == 0
      register: python_ext_install
      ignore_errors: yes
    
    - name: Check if Python Debugger extension is installed in Cursor
      shell: cursor --list-extensions 2>/dev/null | grep -i "ms-python.debugpy"
      register: python_debugger_check
      failed_when: false
      changed_when: false
      when: cursor_cli_final.rc == 0
    
    - name: Install Python Debugger extension in Cursor
      shell: cursor --install-extension ms-python.debugpy --force
      when: python_debugger_check.rc != 0 and cursor_cli_final.rc == 0
      register: python_debugger_install
      ignore_errors: yes

    
    - name: Check if pyenv is installed
      shell: which pyenv
      register: pyenv_check
      failed_when: false
      changed_when: false
    
    - name: Check if direnv is installed
      shell: which direnv
      register: direnv_check
      failed_when: false
      changed_when: false
    
    - name: Check if uv is installed
      shell: which uv
      register: uv_check
      failed_when: false
      changed_when: false
    
    - name: Check if make is installed
      shell: which make
      register: make_check
      failed_when: false
      changed_when: false
    
    - name: Install pyenv via Homebrew
      homebrew:
        name: pyenv
        state: present
      when: pyenv_check.rc != 0
    
    - name: Install direnv via Homebrew
      homebrew:
        name: direnv
        state: present
      when: direnv_check.rc != 0
    
    - name: Install uv via Homebrew
      homebrew:
        name: uv
        state: present
      when: uv_check.rc != 0
    
    - name: Install make via Homebrew
      homebrew:
        name: make
        state: present
      when: make_check.rc != 0
    
    - name: Check if helm is installed
      shell: which helm
      register: helm_check
      failed_when: false
      changed_when: false
    
    - name: Check if go-task is installed
      shell: which task
      register: go_task_check
      failed_when: false
      changed_when: false
    
    - name: Check if openapi-generator is installed
      shell: which openapi-generator
      register: openapi_generator_check
      failed_when: false
      changed_when: false
    
    - name: Check if swagger-codegen is installed
      shell: which swagger-codegen
      register: swagger_codegen_check
      failed_when: false
      changed_when: false
    
    - name: Check if k9s is installed
      shell: which k9s
      register: k9s_check
      failed_when: false
      changed_when: false
    

    
    - name: Install helm via Homebrew
      homebrew:
        name: helm
        state: present
      when: helm_check.rc != 0
    
    - name: Install go-task via Homebrew (from go-task tap)
      shell: brew install go-task/tap/go-task
      when: go_task_check.rc != 0
    
    - name: Install openapi-generator via Homebrew
      homebrew:
        name: openapi-generator
        state: present
      when: openapi_generator_check.rc != 0
    
    - name: Install swagger-codegen via Homebrew
      homebrew:
        name: swagger-codegen
        state: present
      when: swagger_codegen_check.rc != 0
    
    - name: Install k9s via Homebrew (from derailed tap)
      shell: brew install derailed/k9s/k9s
      when: k9s_check.rc != 0

    - name: Check if psql is installed
      shell: which psql
      register: psql_check
      failed_when: false
      changed_when: false

    - name: Install PostgreSQL (psql) via Homebrew
      homebrew:
        name: postgresql
        state: present
      when: psql_check.rc != 0
    
    - name: Check if DBeaver is installed
      shell: ls /Applications/DBeaver.app
      register: dbeaver_check
      failed_when: false
      changed_when: false
    
    - name: Install DBeaver via Homebrew Cask
      homebrew_cask:
        name: dbeaver-community
        state: present
      when: dbeaver_check.rc != 0
      register: dbeaver_install
    

    
    - name: Get home directory
      shell: echo $HOME
      register: home_dir
      changed_when: false
    
    - name: Check if pyenv shell integration is already configured
      shell: grep -q 'pyenv init' "{{ home_dir.stdout }}/.zshrc"
      register: pyenv_configured
      failed_when: false
      changed_when: false
    
    - name: Ensure .zshrc exists
      file:
        path: "{{ home_dir.stdout }}/.zshrc"
        state: touch
        mode: '0644'
      when: pyenv_check.rc != 0 or pyenv_configured.rc != 0
    
    - name: Setup pyenv shell integration
      lineinfile:
        path: "{{ home_dir.stdout }}/.zshrc"
        line: "{{ item }}"
        create: yes
        insertafter: EOF
      loop:
        - 'export PYENV_ROOT="$HOME/.pyenv"'
        - 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'
        - 'eval "$(pyenv init -)"'
      when: pyenv_configured.rc != 0
    
    - name: Check if Python 3.13 is already installed via pyenv
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        pyenv versions --bare | grep -q "^3\.13"
      register: python313_check
      failed_when: false
      changed_when: false
      when: pyenv_check.rc == 0
    
    - name: Install Python 3.13 via pyenv
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv install --skip-existing 3.13
      when: (pyenv_check.rc != 0 or pyenv_configured.rc != 0) or (python313_check is defined and python313_check.rc != 0)
      register: python_install
      changed_when: "'already exists' not in python_install.stderr"
    
    - name: Check if ruff is installed
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        which ruff
      register: ruff_check
      failed_when: false
      changed_when: false
    
    - name: Check if alembic is installed
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        which alembic
      register: alembic_check
      failed_when: false
      changed_when: false
    
    - name: Check if pytest is installed
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        which pytest
      register: pytest_check
      failed_when: false
      changed_when: false
    
    - name: Check if pytest-cov is installed
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        python3 -c "import pytest_cov" 2>/dev/null
      register: pytest_cov_check
      failed_when: false
      changed_when: false
    
    - name: Install ruff via uv
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        uv tool install ruff
      when: ruff_check.rc != 0
    
    - name: Install alembic via uv
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        uv tool install alembic
      when: alembic_check.rc != 0
    
    - name: Install pytest via uv
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        uv tool install pytest
      when: pytest_check.rc != 0
    
    - name: Install pytest-cov via uv (as pytest plugin)
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        uv tool install pytest --with pytest-cov
      when: pytest_cov_check.rc != 0
    
    - name: Check if direnv shell integration is already configured
      shell: grep -q 'direnv hook' "{{ home_dir.stdout }}/.zshrc"
      register: direnv_configured
      failed_when: false
      changed_when: false
    
    - name: Setup direnv shell integration
      lineinfile:
        path: "{{ home_dir.stdout }}/.zshrc"
        line: 'eval "$(direnv hook zsh)"'
        create: yes
        insertafter: EOF
      when: direnv_configured.rc != 0
    
    - name: Check if ll alias is already configured
      shell: grep -q "alias ll='ls -la'" "{{ home_dir.stdout }}/.zshrc"
      register: ll_alias_configured
      failed_when: false
      changed_when: false
    
    - name: Setup ll alias
      lineinfile:
        path: "{{ home_dir.stdout }}/.zshrc"
        line: "alias ll='ls -la'"
        create: yes
        insertafter: EOF
      when: ll_alias_configured.rc != 0
    
    - name: Ensure destination directory exists
      file:
        path: "{{ dest_path | expanduser | dirname }}"
        state: directory
        mode: '0755'
    
    - name: Get default branch name from remote repository
      shell: "git ls-remote --symref {{ repo_url }} HEAD | head -n1 | sed 's/ref: refs\\/heads\\///' | sed 's/[[:space:]].*//' "
      register: default_branch
      when: repo_version == "auto"
      failed_when: false
      changed_when: false
    
    - name: Set final branch version
      set_fact:
        final_repo_version: "{{ default_branch.stdout | trim if repo_version == 'auto' and default_branch is defined and default_branch.rc == 0 and default_branch.stdout != '' else repo_version }}"
    
    - name: Check if repository already exists
      stat:
        path: "{{ dest_path | expanduser }}"
      register: repo_exists
    
    - name: Clone repository if it doesn't exist
      git:
        repo: "{{ repo_url }}"
        dest: "{{ dest_path | expanduser }}"
        version: "{{ final_repo_version }}"
        force: false
      when: not repo_exists.stat.exists
      register: git_clone
    
    - name: Update existing repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ dest_path | expanduser }}"
        version: "{{ final_repo_version }}"
        force: true
      when: repo_exists.stat.exists
      register: git_update
    
    - name: Set git result for display
      set_fact:
        git_result: "{{ git_clone if git_clone is defined else git_update }}"
    
    - name: Display setup summary
      debug:
        msg: |
          🍎 Developer Environment Setup Complete!
          =========================================
          
          ✅ Core Development Tools:
          Xcode Command Line Tools: {{ 'Already installed' if xcode_check is defined and xcode_check.rc == 0 else 'Newly installed' }}
          Homebrew: {{ 'Already installed' if brew_check is defined and brew_check.rc == 0 else 'Newly installed' }}
          Git: {{ 'Available' if git_check is defined and git_check.rc == 0 else 'Not available' }}
          Make: {{ 'Already installed' if make_check is defined and make_check.rc == 0 else 'Newly installed' }}
          
          ✅ Python Development Tools:
          pyenv (Python version manager): {{ 'Already installed' if pyenv_check is defined and pyenv_check.rc == 0 else 'Newly installed' }}
          Python 3.13: {{ 'Already installed' if python313_check is defined and python313_check.rc == 0 else ('Newly installed' if python_install is defined and python_install.changed else 'Installed') }}
          uv (Fast Python package manager): {{ 'Already installed' if uv_check is defined and uv_check.rc == 0 else 'Newly installed' }}
          ruff (Python linter/formatter): {{ 'Already installed' if ruff_check is defined and ruff_check.rc == 0 else 'Newly installed' }}
          pytest (Testing framework): {{ 'Already installed' if pytest_check is defined and pytest_check.rc == 0 else 'Newly installed' }}
          pytest-cov (Test coverage): {{ 'Already installed' if pytest_cov_check is defined and pytest_cov_check.rc == 0 else 'Newly installed' }}
          alembic (Database migrations): {{ 'Already installed' if alembic_check is defined and alembic_check.rc == 0 else 'Newly installed' }}
          
          ✅ DevOps & Infrastructure Tools:
          helm (Kubernetes package manager): {{ 'Already installed' if helm_check is defined and helm_check.rc == 0 else 'Newly installed' }}
          go-task (Task runner): {{ 'Already installed' if go_task_check is defined and go_task_check.rc == 0 else 'Newly installed' }}
          openapi-generator (API tools): {{ 'Already installed' if openapi_generator_check is defined and openapi_generator_check.rc == 0 else 'Newly installed' }}
          swagger-codegen (API code generation): {{ 'Already installed' if swagger_codegen_check is defined and swagger_codegen_check.rc == 0 else 'Newly installed' }}
          k9s (Kubernetes CLI UI): {{ 'Already installed' if k9s_check is defined and k9s_check.rc == 0 else 'Newly installed' }}
          psql (PostgreSQL client): {{ 'Already installed' if psql_check is defined and psql_check.rc == 0 else 'Newly installed' }}
          GitHub CLI (gh): {{ 'Already installed' if gh_check_early is defined and gh_check_early.rc == 0 else 'Newly installed' }}
          
          ✅ Environment & Communication:
          direnv (Environment manager): {{ 'Already installed' if direnv_check is defined and direnv_check.rc == 0 else 'Newly installed' }}
          Slack: {{ 'Already installed' if slack_check is defined and slack_check.rc == 0 else 'Newly installed' }}
          Google Chrome: {{ 'Already installed' if chrome_check is defined and chrome_check.rc == 0 else 'Newly installed' }}
          Cursor AI IDE: {{ 'Already installed' if cursor_check is defined and cursor_check.rc == 0 else 'Newly installed' }}
          GitLens Extension (Cursor): {{ 'Already installed' if gitlens_check is defined and gitlens_check.rc == 0 else 'Newly installed' }}
          Python Extension (Cursor): {{ 'Already installed' if python_ext_check is defined and python_ext_check.rc == 0 else 'Newly installed' }}
          Python Debugger Extension (Cursor): {{ 'Already installed' if python_debugger_check is defined and python_debugger_check.rc == 0 else 'Newly installed' }}

          
          📂 Repository Details:
          Repository: {{ repo_url }}
          Destination: {{ dest_path | expanduser }}
          Branch/Version: {{ final_repo_version }}
          Status: {{ 'Cloned' if git_clone is defined and git_clone.changed else ('Updated' if git_update is defined and git_update.changed else 'Already up to date') }}
          
          🎉 Platform: macOS Apple Silicon
          
          💡 Next Steps:
          • Restart your terminal or run: source ~/.zshrc
          
          📚 Tool Usage Examples:
          
          🐍 Python Development:
          • pyenv list                        # Show available Python versions
          • pyenv install 3.12                # Install another Python version
          • pyenv global 3.13                 # Set Python 3.13 as default
          • pyenv local 3.12                  # Set Python 3.12 for current project
          • pyenv versions                    # Show installed Python versions
          
          • uv venv                           # Create virtual environment (fast!)
          • uv pip install -r requirements.txt # Install dependencies
          • uv pip install package==1.2.3     # Install specific package version
          • uv pip list                       # List installed packages
          • uv pip freeze > requirements.txt  # Export dependencies
          
          • ruff check .                      # Lint Python code
          • ruff check . --fix                # Auto-fix linting issues
          • ruff format .                     # Format Python code
          • ruff rule E501                    # Show details about a rule
          
          • pytest                            # Run all tests
          • pytest tests/test_module.py       # Run specific test file
          • pytest -v                         # Verbose test output
          • pytest --cov                      # Run tests with coverage
          • pytest --cov=mymodule --cov-report=html  # HTML coverage report
          • pytest -k "test_name"             # Run tests matching pattern
          • pytest -x                         # Stop on first failure
          
          • alembic init migrations           # Initialize migrations
          • alembic revision -m "Add user table"  # Create new migration
          • alembic upgrade head              # Apply all migrations
          • alembic downgrade -1              # Rollback one migration
          • alembic history                   # Show migration history
          
          🔧 Environment Management:
          • echo 'layout python' > .envrc     # Auto-activate Python venv
          • echo 'export API_KEY=secret' >> .envrc  # Set env variables
          • direnv allow                      # Approve .envrc file
          • direnv reload                     # Reload environment
          • direnv status                     # Check direnv status
          
          🐙 GitHub CLI:
          • gh auth login                     # Authenticate with GitHub
          • gh auth status                    # Check authentication
          • gh repo create my-project --public # Create new repository
          • gh repo clone owner/repo          # Clone repository
          • gh repo fork owner/repo --clone   # Fork and clone
          • gh pr create --title "Fix bug"    # Create pull request
          • gh pr list                        # List pull requests
          • gh issue create --title "Bug report" # Create issue
          • gh workflow run tests.yml         # Trigger GitHub Action
          
          🏗️ Build Tools:
          • make                              # Run default target
          • make build                        # Build project
          • make test                         # Run tests
          • make clean                        # Clean build artifacts
          • make help                         # Show available targets
          
          • task --list                       # List available tasks
          • task build                        # Run build task
          • task test                         # Run test task
          • task --parallel lint test         # Run tasks in parallel
          • task --watch                      # Watch for changes
          
          🔄 API Development:
          • openapi-generator list            # List available generators
          • openapi-generator generate \
            -i api.yaml \
            -g python-flask \
            -o ./server                       # Generate Flask server
          • openapi-generator generate \
            -i api.yaml \
            -g typescript-axios \
            -o ./client                       # Generate TypeScript client
          
          • swagger-codegen generate \
            -i api.yaml \
            -l python \
            -o ./client                       # Generate Python client
          • swagger-codegen config-help -l python  # Show config options
          
          🗄️ Database Tools:
          • open -a DBeaver                   # Launch DBeaver
          • dbeaver                           # Launch from command line (if CLI configured)
          • # DBeaver tips:
          • # - Supports MySQL, PostgreSQL, SQLite, Oracle, MongoDB, etc.
          • # - Create new connection: Database → New Database Connection
          • # - Import/Export data: Right-click table → Export/Import Data
          • # - SQL Editor: Ctrl+] or Cmd+] for new SQL editor
          • # - Auto-complete: Ctrl+Space in SQL editor

          
          💻 IDE (Cursor):
          • cursor .                          # Open current directory
          • cursor file.py                    # Open specific file
          • cursor --list-extensions          # List installed extensions
          • cursor --install-extension ext-id # Install extension
          • Cmd+Shift+P                       # Command palette
          • Cmd+P                             # Quick file open
          
          🚀 Quick Start Workflow:
          1. cd ~/code/my-project
          2. pyenv local 3.13                 # Set Python version
          3. uv venv                          # Create virtual env
          4. echo 'source .venv/bin/activate' > .envrc
          5. direnv allow                     # Auto-activate venv
          6. uv pip install -r requirements.txt
          7. ruff check . --fix && ruff format .
          8. pytest --cov
          9. cursor .                         # Open in IDE
          
          This playbook is idempotent - you can safely re-run it anytime! 
