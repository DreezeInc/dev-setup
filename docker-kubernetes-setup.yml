---
- name: Docker Desktop and Kubernetes Setup (macOS Apple Silicon)
  hosts: localhost
  connection: local
  gather_facts: false
  become: no
  vars:
    ansible_become_method: sudo
    ansible_become_user: root
  
  tasks:
    - name: Check if jq is installed (needed for Docker Desktop Kubernetes setup)
      shell: which jq
      register: jq_check
      failed_when: false
      changed_when: false
    
    - name: Install jq via Homebrew (required for Kubernetes enablement)
      homebrew:
        name: jq
        state: present
      when: jq_check.rc != 0
    
    - name: Check if Docker is installed
      shell: ls /Applications/Docker.app
      register: docker_check
      failed_when: false
      changed_when: false
    
    - name: Install Docker Desktop via Homebrew Cask
      homebrew_cask:
        name: docker
        state: present
      when: docker_check.rc != 0
      register: docker_install
    
    - name: Check if Docker Desktop is running
      shell: pgrep -f "Docker Desktop" || docker info >/dev/null 2>&1
      register: docker_running_check
      failed_when: false
      changed_when: false
    
    - name: Start Docker Desktop if not running
      shell: open -a Docker
      when: docker_running_check.rc != 0
      register: docker_start
      ignore_errors: yes
    
    - name: Check if Docker was already installed but not running
      set_fact:
        docker_needs_startup: "{{ docker_check.rc == 0 and docker_running_check.rc != 0 }}"
    
    - name: Display Docker startup message
      debug:
        msg: "üê≥ Docker Desktop was already installed but not running. Starting Docker..."
      when: docker_needs_startup | bool
    
    - name: Wait for Docker Desktop to start initially
      pause:
        seconds: 15
      when: docker_start is defined and docker_start.changed
    
    - name: Ensure Docker is ready after starting
      shell: |
        echo "Waiting for Docker to start..."
        for i in {1..30}; do
          if docker info >/dev/null 2>&1; then
            echo "Docker is ready!"
            exit 0
          fi
          echo "Waiting for Docker... ($i/30)"
          sleep 3
        done
        echo "Docker failed to start within 90 seconds"
        exit 1
      when: docker_start is defined and docker_start.changed
      register: docker_startup_ready
      ignore_errors: yes
    
    - name: Check which Docker Desktop settings file exists
      shell: |
        if [ -f "$HOME/Library/Group Containers/group.com.docker/settings-store.json" ]; then
          echo "settings-store.json"
        elif [ -f "$HOME/Library/Group Containers/group.com.docker/settings.json" ]; then
          echo "settings.json"
        else
          echo "none"
        fi
      register: settings_file_type
      changed_when: false
    
    - name: Check if Kubernetes is enabled in Docker Desktop
      shell: |
        if [ "{{ settings_file_type.stdout }}" == "settings-store.json" ]; then
          DOCKER_SETTINGS="$HOME/Library/Group Containers/group.com.docker/settings-store.json"
          if [ -f "$DOCKER_SETTINGS" ]; then
            cat "$DOCKER_SETTINGS" | jq -r '.kubernetes // false'
          else
            echo "false"
          fi
        elif [ "{{ settings_file_type.stdout }}" == "settings.json" ]; then
          DOCKER_SETTINGS="$HOME/Library/Group Containers/group.com.docker/settings.json"
          if [ -f "$DOCKER_SETTINGS" ]; then
            if cat "$DOCKER_SETTINGS" | grep -q '"kubernetesEnabled":true'; then
              echo "true"
            else
              echo "false"
            fi
          else
            echo "false"
          fi
        else
          echo "false"
        fi
      register: k8s_enabled_check
      failed_when: false
      changed_when: false
    
    - name: Wait for Docker Desktop settings file to be created
      shell: |
        for i in {1..20}; do
          if [ -f "$HOME/Library/Group Containers/group.com.docker/settings-store.json" ] || [ -f "$HOME/Library/Group Containers/group.com.docker/settings.json" ]; then
            echo "Docker Desktop settings file found"
            exit 0
          fi
          echo "Waiting for Docker Desktop settings file... ($i/20)"
          sleep 3
        done
        echo "Docker Desktop settings file not found after waiting"
        exit 1
      when: k8s_enabled_check is defined and k8s_enabled_check.stdout is defined and k8s_enabled_check.stdout == "false" and settings_file_type is defined and settings_file_type.stdout is defined and settings_file_type.stdout == "none"
      register: settings_file_wait
      ignore_errors: yes
    
    - name: Re-check which settings file exists after waiting
      shell: |
        if [ -f "$HOME/Library/Group Containers/group.com.docker/settings-store.json" ]; then
          echo "settings-store.json"
        elif [ -f "$HOME/Library/Group Containers/group.com.docker/settings.json" ]; then
          echo "settings.json"
        else
          echo "none"
        fi
      when: k8s_enabled_check is defined and k8s_enabled_check.stdout is defined and k8s_enabled_check.stdout == "false" and settings_file_wait is defined
      register: settings_file_type_after_wait
      changed_when: false
    
    - name: Determine final settings file type
      set_fact:
        final_settings_type: "{{ settings_file_type_after_wait.stdout if settings_file_type_after_wait is defined and settings_file_type_after_wait.stdout is defined else (settings_file_type.stdout if settings_file_type is defined and settings_file_type.stdout is defined else 'none') }}"
    
    - name: Enable containerd image store (required for newer Docker Desktop Kubernetes)
      shell: |
        RESTART_NEEDED=false
        if [ "{{ final_settings_type }}" == "settings-store.json" ]; then
          DOCKER_SETTINGS="$HOME/Library/Group Containers/group.com.docker/settings-store.json"
          if [ -f "$DOCKER_SETTINGS" ]; then
            # Check if containerd is already enabled
            CONTAINERD_ENABLED=$(cat "$DOCKER_SETTINGS" | jq -r '.containerdEnabled // false')
            if [ "$CONTAINERD_ENABLED" != "true" ]; then
              echo "Enabling containerd image store..."
              cat "$DOCKER_SETTINGS" | jq '.containerdEnabled = true' > "$DOCKER_SETTINGS.tmp" && mv "$DOCKER_SETTINGS.tmp" "$DOCKER_SETTINGS"
              echo "containerd image store enabled - Docker Desktop restart required"
              RESTART_NEEDED=true
            else
              echo "containerd image store already enabled"
            fi
          fi
        elif [ "{{ final_settings_type }}" == "settings.json" ]; then
          DOCKER_SETTINGS="$HOME/Library/Group Containers/group.com.docker/settings.json"
          if [ -f "$DOCKER_SETTINGS" ]; then
            # Check if containerd is already enabled
            if ! cat "$DOCKER_SETTINGS" | grep -q '"useContainerdSnapshotter":true'; then
              echo "Enabling containerd image store..."
              cat "$DOCKER_SETTINGS" | jq '.useContainerdSnapshotter = true' > "$DOCKER_SETTINGS.tmp" && mv "$DOCKER_SETTINGS.tmp" "$DOCKER_SETTINGS"
              echo "containerd image store enabled - Docker Desktop restart required"
              RESTART_NEEDED=true
            else
              echo "containerd image store already enabled"
            fi
          fi
        fi
        echo "RESTART_NEEDED=$RESTART_NEEDED"
      register: containerd_enable
      ignore_errors: yes
      changed_when: containerd_enable.stdout is search("RESTART_NEEDED=true")
    
    - name: Enable Kubernetes in Docker Desktop settings
      shell: |
        if [ "{{ final_settings_type }}" == "settings-store.json" ]; then
          DOCKER_SETTINGS="$HOME/Library/Group Containers/group.com.docker/settings-store.json"
          if [ -f "$DOCKER_SETTINGS" ]; then
            # Create backup
            cp "$DOCKER_SETTINGS" "$DOCKER_SETTINGS.backup"
            # Enable Kubernetes with the new settings format
            cat "$DOCKER_SETTINGS" | jq '.kubernetes = true' > "$DOCKER_SETTINGS.tmp" && mv "$DOCKER_SETTINGS.tmp" "$DOCKER_SETTINGS"
            echo "Kubernetes enabled in Docker Desktop settings-store.json"
          else
            echo "ERROR: Docker Desktop settings-store.json not found"
            exit 1
          fi
        elif [ "{{ final_settings_type }}" == "settings.json" ]; then
          DOCKER_SETTINGS="$HOME/Library/Group Containers/group.com.docker/settings.json"
          if [ -f "$DOCKER_SETTINGS" ]; then
            # Create backup
            cp "$DOCKER_SETTINGS" "$DOCKER_SETTINGS.backup"
            # Enable Kubernetes with the old settings format
            cat "$DOCKER_SETTINGS" | jq '.kubernetesEnabled = true' > "$DOCKER_SETTINGS.tmp" && mv "$DOCKER_SETTINGS.tmp" "$DOCKER_SETTINGS"
            echo "Kubernetes enabled in Docker Desktop settings.json"
          else
            echo "ERROR: Docker Desktop settings.json not found"
            exit 1
          fi
        else
          echo "ERROR: No Docker Desktop settings file found"
          exit 1
        fi
      when: k8s_enabled_check is defined and k8s_enabled_check.stdout is defined and k8s_enabled_check.stdout == "false"
      register: k8s_enable
      ignore_errors: yes
    
    - name: Check if manual Docker restart is needed
      debug:
        msg: |
          ‚ö†Ô∏è  Docker Desktop needs to be restarted to apply settings changes.
          
          The playbook will attempt to restart Docker Desktop automatically.
          If this causes issues, you can:
          1. Press Ctrl+C to stop the playbook
          2. Manually restart Docker Desktop
          3. Re-run the playbook with: SKIP_DOCKER_RESTART=1 ansible-playbook docker-kubernetes-setup.yml
      when: (k8s_enable is defined and k8s_enable.changed) or (containerd_enable is defined and containerd_enable.changed)
    
    - name: Restart Docker Desktop to apply settings changes
      shell: |
        echo "Restarting Docker Desktop..."
        osascript -e 'quit app "Docker Desktop"'
        sleep 10
        open -a Docker
        echo "Docker Desktop restart initiated"
      when: ((k8s_enable is defined and k8s_enable.changed) or (containerd_enable is defined and containerd_enable.changed)) and (lookup('env', 'SKIP_DOCKER_RESTART') != '1')
      register: docker_restart
      ignore_errors: yes
    
    - name: Wait for Docker Desktop app to fully launch
      pause:
        seconds: 20
        prompt: "Waiting for Docker Desktop to initialize..."
      when: docker_restart is defined and docker_restart.changed
    
    - name: Wait for Docker daemon to be ready
      shell: |
        echo "Waiting for Docker daemon to be ready..."
        MAX_ATTEMPTS=40
        ATTEMPT=0
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          
          # Check if Docker Desktop is running
          if ! pgrep -f "Docker Desktop" > /dev/null; then
            echo "Docker Desktop not running, waiting... ($ATTEMPT/$MAX_ATTEMPTS)"
            sleep 5
            continue
          fi
          
          # Check if docker daemon is responding
          if docker version --format '{{ "{{.Server.Version}}" }}' 2>/dev/null; then
            echo "Docker daemon is ready!"
            exit 0
          fi
          
          # Try alternative check
          if docker ps >/dev/null 2>&1; then
            echo "Docker daemon is ready!"
            exit 0
          fi
          
          echo "Waiting for Docker daemon... ($ATTEMPT/$MAX_ATTEMPTS)"
          sleep 5
        done
        
        echo "Docker daemon took longer than expected"
        echo "You may need to manually start Docker Desktop"
        exit 0
      when: (k8s_enable is defined and k8s_enable.changed) or (docker_start is defined and docker_start.changed and k8s_enabled_check.stdout == "false") or (containerd_enable is defined and containerd_enable.changed) or (docker_restart is defined and docker_restart.changed)
      register: docker_ready
      ignore_errors: yes
      
    - name: Force Kubernetes initialization with Docker Desktop restart
      shell: |
        echo "Attempting to trigger Kubernetes initialization..."
        # Sometimes Docker Desktop needs multiple restarts to properly initialize Kubernetes
        osascript -e 'quit app "Docker Desktop"' 2>/dev/null || true
        sleep 10
        open -a "Docker Desktop"
        sleep 30
      when: k8s_enable is defined and k8s_enable.changed
      ignore_errors: yes

    - name: Check for kubectl configuration
      stat:
        path: ~/.kube/config
      register: kubeconfig_check
      
    - name: Wait for kubectl configuration to be created
      shell: |
        echo "Waiting for kubectl configuration..."
        for i in {1..30}; do
          if [ -f "$HOME/.kube/config" ]; then
            echo "kubectl configuration found!"
            exit 0
          fi
          echo "Waiting for kubectl configuration... ($i/30)"
          sleep 5
        done
        echo "kubectl configuration not found after waiting"
        exit 1
      when: k8s_enable is defined and k8s_enable.changed and kubeconfig_check is defined and kubeconfig_check.stat is defined and not kubeconfig_check.stat.exists
      register: kubeconfig_wait
      ignore_errors: yes

    - name: Set docker-desktop as default kubectl context
      shell: |
        if kubectl config get-contexts docker-desktop >/dev/null 2>&1; then
          kubectl config use-context docker-desktop
          echo "Set docker-desktop as default context"
        else
          echo "docker-desktop context not found"
          exit 1
        fi
      when: (kubeconfig_wait is defined and kubeconfig_wait is succeeded) or (kubeconfig_check is defined and kubeconfig_check.stat is defined and kubeconfig_check.stat.exists)
      ignore_errors: yes

    - name: Wait for Kubernetes to be ready (optional)
      shell: |
        echo "Waiting for Kubernetes to start..."
        MAX_ATTEMPTS=40
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          
          # Check if kubectl can connect
          if kubectl cluster-info >/dev/null 2>&1; then
            echo "Kubernetes is ready!"
            kubectl get nodes
            exit 0
          fi
          
          # Check if API server is responding on typical ports
          if nc -zv localhost 6443 2>&1 | grep -q succeeded; then
            echo "Kubernetes API server is listening on port 6443"
          elif nc -zv localhost 8080 2>&1 | grep -q succeeded; then
            echo "Kubernetes API server is listening on port 8080"
          fi
          
          echo "Waiting for Kubernetes... ($ATTEMPT/$MAX_ATTEMPTS)"
          sleep 5
        done
        
        echo "Kubernetes took longer than expected, but continuing..."
        echo "You can check Kubernetes status later with: kubectl cluster-info"
        exit 0
      when: k8s_enable is defined and k8s_enable.changed
      register: k8s_ready
      failed_when: false
      ignore_errors: yes

    - name: Pre-pull Kubernetes images for faster startup
      shell: |
        echo "Pre-pulling Kubernetes system images..."
        # These are common images needed by Kubernetes
        docker pull registry.k8s.io/pause:3.9 2>/dev/null || true
        docker pull registry.k8s.io/coredns/coredns:v1.11.1 2>/dev/null || true
        docker pull docker/desktop-storage-provisioner:v2.0 2>/dev/null || true
        docker pull docker/desktop-vpnkit-controller:dc331cb22850be0cdd97c84a9cfecaf44a1afb6e 2>/dev/null || true
        echo "Pre-pulled common Kubernetes images"
      when: k8s_enable is defined and k8s_enable.changed
      ignore_errors: yes
    
    - name: Display Docker and Kubernetes status
      debug:
        msg: |
          üê≥ Docker Status: {{ 'Ready' if (docker_ready is defined and docker_ready.stdout is defined and 'Docker is ready' in docker_ready.stdout) or (docker_startup_ready is defined and docker_startup_ready.stdout is defined and 'Docker is ready' in docker_startup_ready.stdout) else 'Starting (check with: docker info)' }}
          ‚ò∏Ô∏è  Kubernetes Status: {{ 'Ready' if k8s_ready is defined and k8s_ready.stdout is defined and 'Kubernetes is ready' in k8s_ready.stdout else 'Starting (check with: kubectl cluster-info)' }}
          {% if docker_ready is defined and docker_ready.stdout is defined and 'longer than expected' in docker_ready.stdout %}
          
          ‚ö†Ô∏è  Docker Desktop is taking longer than expected to start.
          
          Please check:
          1. Open Docker Desktop manually if it's not already open
          2. Check if Docker Desktop is asking for your password
          3. Make sure Docker Desktop has necessary permissions
          4. Wait for the Docker icon in the menu bar to stop animating
          
          Once Docker is running, you can continue with the setup.
          {% endif %}
          {% if k8s_enable is defined and k8s_enable.changed %}
          
          üí° Note: If Kubernetes doesn't start automatically, please:
             1. Open Docker Desktop
             2. Go to Settings ‚Üí Kubernetes
             3. Check "Enable Kubernetes"
             4. Click "Apply & Restart"
             5. Wait for the "Kubernetes is running" status (this can take 2-5 minutes)
          
          Once Kubernetes is running, verify with:
             kubectl cluster-info
             kubectl get nodes
          
          This manual step may be required on newer Docker Desktop versions.
          {% endif %}
          
          {% if (k8s_ready is defined and k8s_ready.stdout is defined and 'longer than expected' in k8s_ready.stdout) or (kubeconfig_wait is defined and kubeconfig_wait.failed is defined and kubeconfig_wait.failed) %}
          
          ‚ö†Ô∏è  Kubernetes initialization requires manual intervention:
          
          Docker Desktop's Kubernetes feature needs to download and install components
          on first run. This process cannot be fully automated via command line.
          
          Please follow these steps:
          1. Open Docker Desktop manually
          2. Navigate to Settings ‚Üí Kubernetes
          3. Ensure "Enable Kubernetes" is checked
          4. Click "Apply & Restart"
          5. Wait for the progress bar to complete (usually 2-5 minutes)
          6. Look for "Kubernetes is running" with a green indicator
          
          After manual setup, run the check script to verify:
             ./check-k8s.sh
          {% endif %}
      when: docker_ready is defined or k8s_ready is defined or docker_startup_ready is defined or k8s_enable is defined